# ДЗ:
# Возьмите функцию, код которой скинул Андрей.
# Представим, что нам понадобилось изменить эту функцию, чтобы она возвращала int, а не str. Напишите декоратор,
# который будет менять тип данных результата данной функции на int

def to_int_decorator(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        # Преобразуем результат в int
        return int(result)

    return wrapper

@to_int_decorator
def numbers(lst: list) -> int:
    total_difference = 0
   
    if lst:
        total_difference += abs(lst[0] - lst[-1])

    for i in range(len(lst) - 1):
        total_difference += abs(lst[i] - lst[i + 1])

    return total_difference


# Пример использования
result = numbers([1, 2, 3])
print(result)  # Вывод: 2 (разность между 1 и 3 + разности между 1 и 2, 2 и 3)
print(type(result))  # Вывод: <class 'int'>


# Напишите функцию, которая принимает три числа. Третье число – результат какой-то операции над первыми двумя числами
# (+, -, *, /). Выведите, какая это была операция.
# get_operation(2, 5, 7) => '+'
# get_operation(11.1, 8, 88.8) => '*'
# Иногда пользователь может не понять, что передавать в функцию, и передать совсем другие вещи. Числа,
# которые друг с другом вообще не связаны, строки, списки.
# Для этого добавьте в функцию отлова базовых ошибок с различными сообщениями и предупреждениями.


# Напишите декоратор, который будет выводить имя запускаемой функции. Это задачка на самостоятельный поиск информации!
# Есть несколько разных способов это сделать, попытайтесь найти один из них.
# Не стесняйтесь гуглить и искать любую доступную информацию.
def add_sprincles(func):
    def wrapper():
        print("You add sprincles")
        func()
    return wrapper
@add_sprincles
def get_ice_cream():
    print("Here is your ice cream")
    get_ice_creame()

